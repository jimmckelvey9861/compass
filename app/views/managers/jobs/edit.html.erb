<div class="px-4 sm:px-6 lg:px-8">
  <div class="sm:flex sm:items-center">
    <div class="sm:flex-auto">
      <h1 class="text-2xl font-semibold text-gray-900">Edit Job Position</h1>
      <p class="mt-2 text-sm text-gray-700">
        Update the details for this job position.
      </p>
    </div>
    <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
      <%= link_to managers_jobs_path, class: "inline-flex items-center justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" do %>
        <svg class="-ml-1 mr-2 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
        Cancel
      <% end %>
    </div>
  </div>

  <div class="mt-8">
    <div class="md:grid md:grid-cols-3 md:gap-6">
      <div class="md:col-span-1">
        <div class="px-4 sm:px-0">
          <h3 class="text-lg font-medium leading-6 text-gray-900">Job Details</h3>
          <p class="mt-1 text-sm text-gray-600">
            Update the information for this job position.
          </p>
        </div>
      </div>

      <div class="mt-5 md:col-span-2 md:mt-0">
        <%= form_with model: [:managers, @job], class: "space-y-6" do |f| %>
          <% if @job.errors.any? %>
            <div class="rounded-md bg-red-50 p-4">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-sm font-medium text-red-800">There were <%= pluralize(@job.errors.count, "error") %> with this job:</h3>
                  <div class="mt-2 text-sm text-red-700">
                    <ul class="list-disc space-y-1 pl-5">
                      <% @job.errors.full_messages.each do |msg| %>
                        <li><%= msg %></li>
                      <% end %>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          <% end %>

          <div class="bg-white shadow sm:rounded-lg">
            <div class="px-4 py-5 sm:p-6">
              <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                <div class="sm:col-span-4">
                  <%= f.label :name, class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-1">
                    <%= f.text_field :name, required: true, class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" %>
                  </div>
                </div>

                <div class="sm:col-span-6">
                  <%= f.label :description, class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-1">
                    <%= f.text_area :description, rows: 4, placeholder: "Write a brief description of the job position.", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" %>
                  </div>
                </div>

                <div class="sm:col-span-6">
                  <%= f.label :required_skills, class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-1">
                    <%= f.text_area :required_skills, rows: 4, class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" %>
                  </div>

                </div>

                <div class="sm:col-span-6">
                  <%= f.label :required_languages, class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-2 space-y-2">
                    <div class="grid grid-cols-2 gap-4 sm:grid-cols-3 lg:grid-cols-4">
                      <% Job::AVAILABLE_LANGUAGES.each do |language| %>
                        <div class="relative flex items-start">
                          <div class="flex h-5 items-center">
                            <%= f.check_box :required_languages, { multiple: true, checked: @job.required_languages&.include?(language), id: "job_required_languages_#{language.parameterize}", class: "h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" }, language, nil %>
                          </div>
                          <div class="ml-3 text-sm">
                            <label for="job_required_languages_<%= language.parameterize %>" class="font-medium text-gray-700"><%= language %></label>
                          </div>
                        </div>
                      <% end %>
                    </div>
                </div>

                <div class="sm:col-span-6">
                  <%= f.label :color, "Color Tag", class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-2">
                    <div class="grid grid-cols-6 gap-3 sm:grid-cols-8 lg:grid-cols-12" id="color-picker">
                      <% Job::COLOR_PALETTE.each do |color| %>
                        <div class="relative">
                          <%= radio_button_tag 'job[color]', color, @job.color == color,
                              id: "color_#{color.delete('#')}",
                              class: "peer sr-only" %>
                          <label for="color_<%= color.delete('#') %>"
                                class="relative flex aspect-square cursor-pointer items-center justify-center rounded-lg border-2 peer-checked:border-gray-900"
                                style="background-color: <%= color %>;"
                                data-color="<%= color %>">
                              <svg class="absolute h-6 w-6 text-white checkmark" 
                                   style="display: none;"
                                   xmlns="http://www.w3.org/2000/svg" 
                                   fill="none" 
                                   viewBox="0 0 24 24" 
                                   stroke-width="2" 
                                   stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                              </svg>
                          </label>
                        </div>
                      <% end %>
                    </div>
                </div>

                <div class="sm:col-span-2">
                  <%= f.label :min_experience_months, "Minimum Experience (months)", class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-1">
                    <%= f.number_field :min_experience_months, min: 0, class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" %>
                  </div>
                </div>

                <div class="sm:col-span-2">
                  <%= f.label :pay_rate, class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-1">
                    <%= f.number_field :pay_rate, min: 0, step: "0.01", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" %>
                  </div>
                </div>

                <div class="sm:col-span-2">
                  <%= f.label :pay_type, class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-1">
                    <%= f.select :pay_type, 
                        options_for_select([['Hourly', 'hourly'], ['Salary', 'salary']], @job.pay_type), 
                        {}, 
                        class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" %>
                  </div>
                </div>

                <div class="sm:col-span-2">
                  <%= f.label :status, class: "block text-sm font-medium text-gray-700" %>
                  <div class="mt-1">
                    <%= f.select :status, 
                        options_for_select([['Active', 'active'], ['Inactive', 'inactive']], @job.status), 
                        {}, 
                        class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" %>
                  </div>
                </div>
              </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 text-right sm:px-6">
              <%= f.submit "Update Job", class: "inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" %>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('turbo:load', function() {
  initColorPicker();
});

document.addEventListener('DOMContentLoaded', function() {
  initColorPicker();
});

function initColorPicker() {
  const customInput = document.getElementById('job_color_custom');
  const preview = document.getElementById('color_preview');
  const colorPicker = document.getElementById('color-picker');

  // Skip if we've already initialized this instance
  if (!colorPicker || colorPicker.dataset.initialized) return;
  colorPicker.dataset.initialized = 'true';

  function updateDisplay(selectedLabel) {
    // Hide all checkmarks
    colorPicker.querySelectorAll('.checkmark').forEach(mark => {
      mark.style.display = 'none';
    });

    if (selectedLabel) {
      // Show checkmark for selected color
      const checkmark = selectedLabel.querySelector('.checkmark');
      if (checkmark) {
        checkmark.style.display = 'block';
      }

      // Update custom input and preview
      const color = selectedLabel.dataset.color;
      customInput.value = color;
      preview.style.backgroundColor = color;
    }
  }

  // Handle initial state
  const initialRadio = colorPicker.querySelector('input[type="radio"]:checked');
  if (initialRadio) {
    const initialLabel = colorPicker.querySelector(`label[for="${initialRadio.id}"]`);
    updateDisplay(initialLabel);
  }

  // Handle radio button changes
  colorPicker.addEventListener('change', function(e) {
    if (e.target.type === 'radio') {
      console.log('Radio changed:', e.target.id, e.target.value);
      const label = colorPicker.querySelector(`label[for="${e.target.id}"]`);
      updateDisplay(label);
    }
  });

  // Handle direct label clicks
  colorPicker.addEventListener('click', function(e) {
    const label = e.target.closest('label[data-color]');
    if (label) {
      console.log('Label clicked:', label.getAttribute('for'), label.dataset.color);
      const radio = document.getElementById(label.getAttribute('for'));
      if (radio) {
        radio.checked = true;
        updateDisplay(label);
      }
    }
  });

  // Handle custom color input
  customInput.addEventListener('input', function(e) {
    const color = e.target.value;
    console.log('Custom color input:', color);
    preview.style.backgroundColor = color;
    
    // Clear radio selection and checkmarks
    colorPicker.querySelectorAll('input[type="radio"]').forEach(radio => {
      radio.checked = false;
    });
    updateDisplay(null);
  });

  // Prevent form submission on enter in custom input
  customInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
    }
  });
}
</script>